#+TITLE: Sacha Trémoureux's Emacs configuration
#+OPTIONS: toc:4 h:4

* Introduction
Inspired by :

- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
- [[https://github.com/mwfogleman/config/blob/master/home/.emacs.d/michael.org][Michael Fogleman’s Emacs configuration]]

* Configuration
** Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Sacha Trémoureux"
        user-mail-address "sacha@tremoureux.fr")
#+END_SRC

** Emacs initialization
*** Add elisp directory

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp")
(require 'use-package)
#+END_SRC

*** Add package sources

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
      )
#+END_SRC

*** Startup messages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message ""
        inhibit-startup-echo-area-message t)
#+END_SRC

** General configuration
*** Backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** History
#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'wombat t)
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
'(font . "DejaVu Sans Mono-14"))
#+END_SRC
*** Window
#+BEGIN_SRC emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
#+END_SRC
*** Sentences end with a single space
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

*** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** UTF-8
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

*** Default application
#+BEGIN_SRC emacs-lisp
(setcdr (assq 'system org-file-apps-defaults-gnu ) "xdg-open %s")
#+END_SRC
*** Recent files
#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 15)
  (recentf-mode)
#+END_SRC
*** Firefox
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-firefox
        browse-url-new-window-flag  t
        browse-url-firefox-new-window-is-tab t)
#+END_SRC
*** Frequently-accessed files
#+BEGIN_SRC emacs-lisp 
  (mapcar
   (lambda (r)
     (set-register (car r) (cons 'file (cdr r))))
   '((?s . "~/.emacs.d/sacha.org")
     (?t . "~/Git repositories/Org mode/tech.org")
     (?w . "~/Git repositories/Org mode/work.org")
     (?p . "~/Git repositories/Org mode/perso.org")))
#+END_SRC
*** Buffer / File Warnings

#+BEGIN_SRC emacs-lisp
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; via https://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/

  (defun create-non-existent-directory ()
    "Check whether a given file's parent directories exist; if they do not, offer to create them."
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))

  (add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC
*** Aspell
#+BEGIN_SRC emacs-lisp
(setq-default ispell-program-name "aspell")
(setq ispell-dictionary "francais")
#+END_SRC
** Packages
*** Org
    
Override default Org keybinding.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-odt-data-dir "~/.emacs.d/elisp/org-mode/etc/")
    (setq org-odt-styles-dir "~/.emacs.d/elisp/org-mode/etc/styles/")
    (use-package ox-latex-capensis
      :config
      (add-to-list 'org-latex-capensis-classes
                   '("capensis"
                     "\\documentclass{/home/sacha/Templates/capensis}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                   )
      )

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
            (sequence "WAITING(w)" "HOLD(h)" "SOMEDAY(o)" "|" "CANCELLED(c)")))
    (setq org-export-with-sub-superscripts nil)
    (use-package ox-odt)
    :config
    (define-key org-mode-map (kbd "C-a") nil)
    (define-key org-mode-map (kbd "C-e") nil)
    (define-key org-mode-map (kbd "M-a") nil)
    (define-key org-mode-map (kbd "M-e") nil)
    :diminish org-mode)
#+END_SRC

**** Org agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/Git repositories/Org mode/perso.org"
                               "~/Git repositories/Org mode/tech.org" 
                               "~/Git repositories/Org mode/work.org"))
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-start-on-weekday nil)

  (defun org-archive-done-tasks ()
    "Archive finished or cancelled tasks."
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))

  (define-key org-mode-map (kbd "C-x à") 'org-archive-done-tasks)
#+END_SRC
*** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure undo-tree
    :init 
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-mode-lighter "UT")
    )
  )
#+END_SRC

*** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure helm
    :init
    (progn 
      (require 'helm-config) 
      (helm-mode))
    :config
    (define-key helm-map (kbd "M-u") 'helm-previous-line)
    (define-key helm-map (kbd "M-i") 'helm-next-line)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-j") 'helm-select-action)
		:diminish helm-mode)
#+END_SRC

*** Helm Swoop

#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :bind
    (("C-s" . helm-swoop)
     ("C-S-s" . helm-multi-swoop-all))
    :config
     (setq helm-swoop-pre-input-function
        (lambda () ""))
    )
#+END_SRC

*** Auctex

#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex)
#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/elisp/snippets" yas-installed-snippets-dir))
    (yas-global-mode 1))
#+END_SRC

** Email
*** mu4e

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :load-path "~/.emacs.d/elisp/mu/mu4e"
    :init
    (setq mu4e-mu-binary "~/.emacs.d/elisp/mu/mu/mu"
          mu4e-maildir "~/Mails"
          mu4e-drafts-folder "/Drafts"
          mu4e-sent-folder "/Sent"
          mu4e-trash-folder "/Trash"
					mu4e-refile-folder "/Archives"
          mu4e-get-mail-command "offlineimap"
          mu4e-update-interval 900
          message-signature "Sacha Trémoureux - <sacha@tremoureux.fr>\nAdministrateur Systèmes et Réseaux\n+33 (0)7 86 46 93 68\n\nCAPENSIS - Solutions Linux\nhttp://www.capensis.fr\n\nAgence Ouest\n67, Rue Ernest Sauvestre\n44400 REZÉ"
          mu4e-compose-signature "Sacha Trémoureux - <sacha@tremoureux.fr>\nAdministrateur Systèmes et Réseaux\n+33 (0)7 86 46 93 68\n\nCAPENSIS - Solutions Linux\nhttp://www.capensis.fr\n\nAgence Ouest\n67, Rue Ernest Sauvestre\n44400 REZÉ"
          )
    (use-package smtpmail
      :init
      (setq message-send-mail-function 'smtpmail-send-it
            smtpmail-stream-type 'starttls
            smtpmail-smtp-server "smtp.beastie.eu"
            smtpmail-smtp-service 587
            smtpmail-queue-mail nil
            smtpmail-queue-dir "~/Mails/queue/cur"
            ))
    :config
    (add-to-list 'mu4e-view-actions
                 '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (add-hook 'mu4e-compose-mode-hook 'turn-on-orgstruct)
    (add-hook 'mu4e-compose-mode-hook 'auto-fill-mode)
    )
#+END_SRC

** Key Bindings
*** Basic operations

I use a special keyboard layout intended for the French language: [[http://bepo.fr][Bépo]]. I am trying to have some ergonomic keybinds with basic operations in Emacs.

#+BEGIN_SRC emacs-lisp
  (bind-keys ("M-a" . backward-char)
             ("M-i" . next-line)
             ("M-u" . previous-line)
             ("M-e" . forward-char)
             ("C-a" . backward-word)
             ("C-e" . forward-word)
             ("M-b" . beginning-of-line)
             ("M-o" . end-of-line)
             ("M-." . scroll-up)
             ("M-y" . scroll-down)
             ("C-b" . beginning-of-buffer)
             ("C-w" . end-of-buffer)
             ("M-é" . backward-paragraph)
             ("M-p" . forward-paragraph)
             ("M-c" . kill-line)
             ("C-c" . kill-sentence)
             ("M-t" . delete-char)
             ("C-t" . kill-word)
             ("M-v" . undo-tree-undo)
             ("M-d" . undo-tree-redo)
             ("C-v" . undo-tree-switch-branch)
             ("M-g" . save-buffers-kill-terminal)
             ("C-q" . find-file)
             ("M-q" . save-buffer)
             ("M-+" . set-mark-command)
             ("M--" . mark-whole-buffer)
             ("M-j" . kill-ring-save)
             ("M-n" . yank)
             ("C-S-c" . clipboard-kill-ring-save)
             ("C-S-x" . clipboard-kill-region)
             ("C-S-v" . clipboard-yank)
             ("M-m" . yank-pop)
             ("M-f" . kill-region)
             ("M-," . universal-argument)
             ("M-h" . goto-line)
             ("M-z" . shell-command)
             ("M-$" . other-window)
             ("M-\"" . split-window-right)
             ("M-«" . split-window-below)
             ("M-»" . delete-other-windows)
             ("M-(" . delete-window)
             ("RET" . newline-and-indent)
             ("C-j" . newline-and-indent))
  (define-key minibuffer-local-map (kbd "C-p") 'next-complete-history-element)
  (define-key minibuffer-local-map (kbd "M-n") 'yank)
#+END_SRC
*** Other keybinds

#+BEGIN_SRC emacs-lisp
  (bind-keys ("C-x a" . org-agenda)
             ("C-x j" . mu4e))
#+END_SRC
** Coding
*** Tab width
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

*** Column number
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

