#+TITLE: Sacha Trémoureux's Emacs configuration
#+OPTIONS: toc:4 h:4

* Introduction
Inspired by :

- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]
- [[https://github.com/mwfogleman/config/blob/master/home/.emacs.d/michael.org][Michael Fogleman’s Emacs configuration]]

* Configuration
** Personal information

#+begin_src emacs-lisp
  (setq user-full-name "Sacha Trémoureux"
        user-mail-address "sacha@tremoureux.fr")
#+end_src

** Emacs initialization
*** Add elisp directory

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp")
(require 'use-package)
#+end_src

*** Add package sources

#+begin_src emacs-lisp
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
#+end_src

*** Startup messages
#+begin_src emacs-lisp
(setq inhibit-startup-message t
      initial-scratch-message ""
      inhibit-startup-echo-area-message t)
#+end_src

** General configuration
*** Backups
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** History
#+begin_src emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+end_src
*** Window
#+begin_src emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1))
#+end_src
*** Sentences end with a single space
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

*** Change "yes or no" to "y or n"
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** UTF-8
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

*** Recent files
#+begin_src emacs-lisp
  (require 'recentf)
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 15)
  (recentf-mode)
#+end_src

** Packages
*** Org
    
Override default Org keybinding.

#+begin_src emacs-lisp
  (use-package org
    :config
    (define-key org-mode-map (kbd "C-a") nil)
    (define-key org-mode-map (kbd "C-e") nil)
    (define-key org-mode-map (kbd "M-a") nil)
    (define-key org-mode-map (kbd "M-e") nil)
    )
#+end_src

*** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure undo-tree
    :init 
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-mode-lighter "UT")
    )
  )
#+end_src

** Key Bindings
*** Basic operations
I use a special keyboard layout intended for the French language: [[http://bepo.fr][Bépo]]. I am trying to have some ergonomic keybinds with basic operations in Emacs.

#+begin_src emacs-lisp
  (bind-keys ("M-a" . backward-char)
             ("M-i" . next-line)
             ("M-u" . previous-line)
             ("M-e" . forward-char)
             ("C-a" . backward-word)
             ("C-e" . forward-word)
             ("M-b" . beginning-of-line)
             ("M-o" . end-of-line)
             ("M-." . scroll-up)
             ("M-y" . scroll-down)
             ("C-b" . beginning-of-buffer)
             ("C-w" . end-of-buffer)
             ("M-é" . backward-paragraph)
             ("M-p" . forward-paragraph)
             ("M-c" . kill-line)
             ("C-c" . kill-sentence)
             ("M-t" . delete-char)
             ("C-t" . kill-word)
             ("M-v" . undo-tree-undo)
             ("M-d" . undo-tree-redo)
             ("C-v" . undo-tree-switch-branch)
             ("M-g" . save-buffers-kill-terminal)
             ("C-q" . find-file)
             ("M-q" . save-buffer)
             ("M-+" . set-mark-command)
             ("M--" . mark-whole-buffer)
             ("M-j" . kill-ring-save)
             ("M-n" . yank)
             ("M-m" . yank-pop)
             ("M-f" . kill-region)
             ("M-," . universal-argument)
             ("M-h" . goto-line)
             ("M-z" . shell-command)
             ("M-$" . other-window)
             ("M-\"" . split-window-right)
             ("M-«" . split-window-below)
             ("M-»" . delete-other-windows)
             ("M-(" . delete-window)
	     ("RET" . newline-and-indent)
	     ("C-j" . newline-and-indent)
  )
(define-key minibuffer-local-map (kbd "C-p") 'next-complete-history-element)
(define-key minibuffer-local-map (kbd "M-n") 'yank)
#+end_src
** Coding
*** Tab width
#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

*** Column number
#+begin_src emacs-lisp
  (column-number-mode 1)
#+end_src



